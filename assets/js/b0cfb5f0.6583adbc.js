"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5554],{3034:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(5893),o=t(1151);const i={sidebar_position:3.9},s="Peer-to-Peer Connection",a={id:"configuration/peer-to-peer",title:"Peer-to-Peer Connection",description:"Having a strong peer-to-peer connection is crucial for a good Pod Arcade experience. This page will explain how Pod Arcade uses WebRTC to establish a peer-to-peer connection between the Desktop and the Browser, and what options you have available to improve your connection.",source:"@site/docs/configuration/peer-to-peer.md",sourceDirName:"configuration",slug:"/configuration/peer-to-peer",permalink:"/docs/configuration/peer-to-peer",draft:!1,unlisted:!1,editUrl:"https://github.com/pod-arcade/website/tree/main/docs/configuration/peer-to-peer.md",tags:[],version:"current",sidebarPosition:3.9,frontMatter:{sidebar_position:3.9},sidebar:"tutorialSidebar",previous:{title:"Desktop",permalink:"/docs/configuration/desktop"}},c={},d=[{value:"ICE Servers",id:"ice-servers",level:2},{value:"STUN",id:"stun",level:3},{value:"TURN",id:"turn",level:3}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",mermaid:"mermaid",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"peer-to-peer-connection",children:"Peer-to-Peer Connection"}),"\n",(0,r.jsx)(n.p,{children:"Having a strong peer-to-peer connection is crucial for a good Pod Arcade experience. This page will explain how Pod Arcade uses WebRTC to establish a peer-to-peer connection between the Desktop and the Browser, and what options you have available to improve your connection."}),"\n",(0,r.jsx)(n.h2,{id:"ice-servers",children:"ICE Servers"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"ICE (Interactive Connectivity Establishment) is a framework used by WebRTC (among other technologies) for connecting two peers, regardless of network topology (usually for audio and video chat). This protocol lets two peers find and establish a connection with one another even though they may both be using Network Address Translator (NAT) to share a global IP address with other devices on their respective local networks."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/ICE",children:"https://developer.mozilla.org/en-US/docs/Glossary/ICE"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"stun",children:"STUN"}),"\n",(0,r.jsx)(n.p,{children:"STUN is an API used to obtain the IP address, port number, and connectivity status of a client running behind a firewall."}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n  participant A as Client<br>Private IP: 192.168.0.10\n  participant B as NAT/Router<br>Public IP: 100.1.0.20\n  participant C as STUN Server<br>Public IP: 1.2.3.4\n\nactivate A\n  A --\x3e> B: 192.168.0.10:1234 -> 1.2.3.4:3478<br/>STUN Binding Request\n  activate B\n    B --\x3e> C: 100.1.0.20:53678 -> 1.2.3.4:3478<br/>STUN Binding Request\n    activate C\n    C ->> C: Process STUN request\n    C --\x3e> B: 1.2.3.4:3478 -> 100.1.0.20:53678<br/>STUN Binding Response: 100.1.0.20:53678\n    deactivate C\n  B --\x3e> A: 1.2.3.4:3478 -> 192.168.0.10:1234<br/>STUN Binding Response: 100.1.0.20:53678\n  deactivate B\ndeactivate A"}),"\n",(0,r.jsx)(n.p,{children:"When a Client initiates a STUN request, it sends a Binding Request to the STUN server. The NAT/Router will then forward the request to the STUN server, which will respond with a Binding Response containing the public IP address and port number of the NAT/Router. The NAT/Router will then forward the Binding Response to the Client. The client now knows its public IP address and port number, which it can use to communicate with other clients."}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"If your NAT/Router uses Symmetric NAT, it will require a different NAT entry for each destination IP address meaning a direct peer-to-peer connection will not be able to be established between two clients. In this case, you will need to use a TURN server."})}),"\n",(0,r.jsxs)(n.p,{children:["The Pod Arcade Server component includes a STUN server out of the box. If you are self hosting this component, consider not only port-forwarding the HTTP port, but also the STUN port. You can configure the STUN port using the ",(0,r.jsx)(n.code,{children:"STUN_PORT"})," ",(0,r.jsx)(n.a,{href:"/docs/configuration/server#server-configuration",children:"environment variable"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you want to instead use a public STUN server, you can use the following configuration or replace it with any other STUN server of your choice. ",(0,r.jsx)(n.a,{href:"https://gist.github.com/zziuni/3741933",children:"https://gist.github.com/zziuni/3741933"})," has a currated list of free STUN servers."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'[{"urls":["stun:stun.l.google.com:19302"]}]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"turn",children:"TURN"}),"\n",(0,r.jsx)(n.p,{children:"In the event that WebRTC is unable to establish a direct connection between the Desktop and the Browser, it will attempt to use a TURN server to relay the traffic. This is a last resort, as it will add latency to your Pod Arcade sessions. In this scenario, all traffic between the Desktop and the Browser will be routed through the TURN server."}),"\n",(0,r.jsx)(n.mermaid,{value:"graph TD;\n  A[Pod Arcade Desktop]\n  B[Pod Arcade Server]\n  C[TURN Server]\n  D[Web Browser]\n  A & D -- mqtt --\x3e  B;\n  A & D <-. webrtc .-> C;"}),"\n",(0,r.jsxs)(n.p,{children:["The Pod Arcade Server component does not include a TURN server out of the box. You will need to run your own TURN server and configure it using the ",(0,r.jsx)(n.code,{children:"ICE_SERVERS"})," ",(0,r.jsx)(n.a,{href:"/docs/configuration/server#server-configuration",children:"environment variable"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["During development, the Pod Arcade team used ",(0,r.jsx)(n.a,{href:"https://github.com/l7mp/stunner",children:"Stunner"}),", a Kubernetes native STUN/TURN server. With that you can configure a static username and password and then configure the Pod Arcade Server component to use it like so:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'[\n  {"urls":["stun:10.0.0.10:3478?transport=udp"]},\n  {"urls":["turn:{{private_ip}}:3478?transport=udp","turn:{{public_ip}}:3478?transport=udp"],"username":"user-1","credential":"pass-1"}\n]\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);