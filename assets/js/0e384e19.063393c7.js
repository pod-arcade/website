"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[671],{7876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(5893),r=n(1151);const s={sidebar_position:1},a="Introduction",i={id:"intro",title:"Introduction",description:"Pod Arcade is an open-source project that enables you to stream games via RetroArch or other compatible software, running on Wayland, directly to your web browser.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/pod-arcade/website/tree/main/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar"},d={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Helm",id:"helm",level:3},{value:"Docker",id:"docker",level:3},{value:"Docker Compose",id:"docker-compose",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(t.p,{children:"Pod Arcade is an open-source project that enables you to stream games via RetroArch or other compatible software, running on Wayland, directly to your web browser."}),"\n",(0,o.jsx)(t.p,{children:"It is designed to be deployed on Kubernetes, but can also be deployed using Docker or any other container platform."}),"\n",(0,o.jsx)(t.p,{children:"There are two major components to Pod Arcade:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"The Pod Arcade Server \u2014 an MQTT server manages the game streaming sessions. Desktops and web browsers connect to this server in order to stream games."}),"\n",(0,o.jsx)(t.li,{children:"The Pod Arcade Desktop \u2014 a desktop application that runs on Wayland and streams games to the Pod Arcade Server."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(t.p,{children:"If you just want to get something up and running quicky, you have a few different options."}),"\n",(0,o.jsx)(t.h3,{id:"helm",children:"Helm"}),"\n",(0,o.jsxs)(t.p,{children:["We provide some reference helm charts for deploying Pod Arcade on Kubernetes, at ",(0,o.jsx)(t.a,{href:"https://github.com/pod-arcade/charts",children:"pod-arcade/charts"}),". This is what we use to deploy Pod Arcade during development, and is likely the easiest way to get started."]}),"\n",(0,o.jsx)(t.h3,{id:"docker",children:"Docker"}),"\n",(0,o.jsxs)(t.p,{children:["Run the server with this. You should be able to connect using ",(0,o.jsx)(t.a,{href:"https://localhost:8443",children:"https://localhost:8443"}),". You may need to accept the self-signed certificate.\nIf that doesn't work, you may need to generate your own certificate and key, add that to your trust store, mount it into the container, and set the ",(0,o.jsx)(t.code,{children:"TLS_CERT"})," and ",(0,o.jsx)(t.code,{children:"TLS_KEY"})," environment variables to the path you mounted them to. Alternatively, ",(0,o.jsx)(t.a,{href:"chrome://flags/#allow-insecure-localhost",children:"chrome has a flag that will allow you to ignore invalid certificates on localhost"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'docker run -it --rm --name pa-server \\\n  -p 1883:1883 \\\n  -p 8080:8080 \\\n  -p 8443:8443 \\\n  -e DESKTOP_PSK="theMagicStringUsedToAuthenticateDesktops" \\\n  -e CLIENT_PSK="thePasswordUsersPutInToConnect" \\\n  -e ICE_SERVERS=\'[{"urls":["stun:stun.l.google.com:19302"]}\' \\\n  -e AUTH_REQUIRED="true" \\\n  -e SERVE_TLS="true" \\\n ghcr.io/pod-arcade/server:main\n'})}),"\n",(0,o.jsx)(t.p,{children:"and run an example retroarch client with:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"docker volume create pa-desktop-dri\ndocker run -it --rm --user 0 --privileged --link pa-server:pa-server \\\n  -e WAYLAND_DISPLAY=wayland-1 \\\n  -e MQTT_HOST=\"ws://pa-server:8080/mqtt\" \\\n  -e DESKTOP_ID=example-retroarch \\\n  -e DESKTOP_PSK=\"theMagicStringUsedToAuthenticateDesktops\" \\\n  -e DISABLE_HW_ACCEL='false' \\\n  -e DISPLAY=':0' \\\n  -e DRI_DEVICE_MODE=MKNOD \\\n  -e FFMPEG_HARDWARE='1' \\\n  -e PGID='1000' \\\n  -e PUID='1000' \\\n  -e PULSE_SERVER='unix:/tmp/pulse/pulse-socket' \\\n  -e UINPUT_DEVICE_MODE=NONE \\\n  -e UNAME=ubuntu \\\n  -e WLR_BACKENDS=headless \\\n  -e WLR_NO_HARDWARE_CURSORS='1' \\\n  -e WLR_RENDERER=gles2 \\\n  -e XDG_RUNTIME_DIR=/tmp/sway \\\n  -v /dev/dri:/dev/host-dri \\\n  -v /dev/uinput:/dev/uinput \\\n  -v pa-desktop-dri:/dev/dri \\\n ghcr.io/pod-arcade/desktop:main\n"})}),"\n",(0,o.jsx)(t.h3,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,o.jsxs)(t.p,{children:["There's docker-compose for running desktops in ",(0,o.jsx)(t.a,{href:"https://github.com/pod-arcade/example-apps",children:"pod-arcade/example-apps"})]}),"\n",(0,o.jsx)(t.p,{children:"You'll need to set some of the environment variables to have it connect to the Pod Arcade server. Just be careful which example applications you look at. Many of those pod-arcade/example-apps simply use the built in VNC server to stream the desktop to the browser, not Pod Arcade. That's because it's much faster to do development that way, and will be compatible with pod-arcade if the VNC approach works."})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var o=n(7294);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);