{"searchDocs":[{"title":"Desktop","type":0,"sectionRef":"#","url":"/docs/configuration/desktop/","content":"Desktop Coming soon...","keywords":"","version":"Next"},{"title":"Peer-to-Peer Connection","type":0,"sectionRef":"#","url":"/docs/configuration/peer-to-peer/","content":"","keywords":"","version":"Next"},{"title":"ICE Servers​","type":1,"pageTitle":"Peer-to-Peer Connection","url":"/docs/configuration/peer-to-peer/#ice-servers","content":" ICE (Interactive Connectivity Establishment) is a framework used by WebRTC (among other technologies) for connecting two peers, regardless of network topology (usually for audio and video chat). This protocol lets two peers find and establish a connection with one another even though they may both be using Network Address Translator (NAT) to share a global IP address with other devices on their respective local networks. https://developer.mozilla.org/en-US/docs/Glossary/ICE  ","version":"Next","tagName":"h2"},{"title":"STUN​","type":1,"pageTitle":"Peer-to-Peer Connection","url":"/docs/configuration/peer-to-peer/#stun","content":" STUN is an API used to obtain the IP address, port number, and connectivity status of a client running behind a firewall.    When a Client initiates a STUN request, it sends a Binding Request to the STUN server. The NAT/Router will then forward the request to the STUN server, which will respond with a Binding Response containing the public IP address and port number of the NAT/Router. The NAT/Router will then forward the Binding Response to the Client. The client now knows its public IP address and port number, which it can use to communicate with other clients.  warning If your NAT/Router uses Symmetric NAT, it will require a different NAT entry for each destination IP address meaning a direct peer-to-peer connection will not be able to be established between two clients. In this case, you will need to use a TURN server.  The Pod Arcade Server component includes a STUN server out of the box. If you are self hosting this component, consider not only port-forwarding the HTTP port, but also the STUN port. You can configure the STUN port using the STUN_PORT environment variable.  If you want to instead use a public STUN server, you can use the following configuration or replace it with any other STUN server of your choice. https://gist.github.com/zziuni/3741933 has a currated list of free STUN servers.  [{&quot;urls&quot;:[&quot;stun:stun.l.google.com:19302&quot;]}]   ","version":"Next","tagName":"h3"},{"title":"TURN​","type":1,"pageTitle":"Peer-to-Peer Connection","url":"/docs/configuration/peer-to-peer/#turn","content":" In the event that WebRTC is unable to establish a direct connection between the Desktop and the Browser, it will attempt to use a TURN server to relay the traffic. This is a last resort, as it will add latency to your Pod Arcade sessions. In this scenario, all traffic between the Desktop and the Browser will be routed through the TURN server.    The Pod Arcade Server component does not include a TURN server out of the box. You will need to run your own TURN server and configure it using the ICE_SERVERS environment variable.  During development, the Pod Arcade team used Stunner, a Kubernetes native STUN/TURN server. With that you can configure a static username and password and then configure the Pod Arcade Server component to use it like so:  [ {&quot;urls&quot;:[&quot;stun:10.0.0.10:3478?transport=udp&quot;]}, {&quot;urls&quot;:[&quot;turn:{{private_ip}}:3478?transport=udp&quot;,&quot;turn:{{public_ip}}:3478?transport=udp&quot;],&quot;username&quot;:&quot;user-1&quot;,&quot;credential&quot;:&quot;pass-1&quot;} ]  ","version":"Next","tagName":"h3"},{"title":"Kubernetes (Helm)","type":0,"sectionRef":"#","url":"/docs/getting-started/helm/","content":"Kubernetes (Helm) We provide some reference helm charts for deploying Pod Arcade on Kubernetes, at pod-arcade/charts. This is what we use to deploy Pod Arcade during development, and is likely the easiest way to get started. To get started simply add the helm repository: helm repo add pod-arcade https://charts.pod-arcade.com Then install the server component: helm install pa-server pod-arcade/server you can find the values.yaml file for the server chart here. Reference the server configuration for more information on the configuration options. Then install a desktop component: helm install pa-desktop pod-arcade/desktop-sidecar the values.yaml file for the desktop chart can be found here. Reference the desktop configuration for more information on the configuration options.","keywords":"","version":"Next"},{"title":"Server","type":0,"sectionRef":"#","url":"/docs/configuration/server/","content":"","keywords":"","version":"Next"},{"title":"Configuration​","type":1,"pageTitle":"Server","url":"/docs/configuration/server/#configuration","content":" ","version":"Next","tagName":"h2"},{"title":"Server configuration​","type":1,"pageTitle":"Server","url":"/docs/configuration/server/#server-configuration","content":" Environment Variable\tDescription\tDefaultICE_SERVERS\tA JSON string containing a list of ICE servers to use for the web clients. See ICE Servers below for more details\t[] AUTH_REQUIRED\tBoolean indicating whether authentication is required for both desktop\tfalse STUN_PORT\tPort number to run the integrated STUN server. Set to -1 to disable\t-1 HTTP_PORT\tPort number to run the HTTP server off of\t8080 SERVE_TLS\tBoolean indicating whether or not to serve the web client and mqtt connection over HTTPS\tfalse TLS_PORT\tWhat port to run the TLS server off of for the HTTPS connections\t8443 TLS_KEY\tTLS key in PEM format\tdisabled TLS_CERT\tTLS certificate in PEM format. If the certificate is signed by a certificate authority, the file should be the concatenation of the server's certificate, any intermediates, and the CA's certificate.\tdisabled  ","version":"Next","tagName":"h3"},{"title":"Desktop authentication​","type":1,"pageTitle":"Server","url":"/docs/configuration/server/#desktop-authentication","content":" Environment Variable\tDescription\tDefaultDESKTOP_PSK\tPreshared key with all desktops used for secure registration and communication. If not provided, desktop authentication is disabled.\tdisabled  ","version":"Next","tagName":"h3"},{"title":"Client authentication​","type":1,"pageTitle":"Server","url":"/docs/configuration/server/#client-authentication","content":" Environment Variable\tDescription\tDefaultCLIENT_PSK\tIf provided, will require that the desktop client provide a preshared key (password) before being allowed to connect to the server or any of the Desktops. If not provided and OIDC_SERVER is, OpenID Connect will be used instead, otherwise no auth will be required.\tdisabled OIDC_SERVER\tOpenID Connect issuer url. Ex. http://keycloak.example.com/realms/my_realm. If set will redirect the client to the auth provider for login. See OpenID Configuration below for more details.\tdisabled OIDC_CLIENT_ID\tOpenID Connect client id to be used during the login. See OpenID Configuration below for more details.\tdisabled  ","version":"Next","tagName":"h3"},{"title":"ICE Servers​","type":1,"pageTitle":"Server","url":"/docs/configuration/server/#ice-servers","content":" The ICE servers configuration is a JSON string containing an array of objects, each describing one server which may be used by the ICE agent; these are typically STUN and/or TURN servers. If this isn't specified, the connection attempt will be made with no STUN or TURN server available, which limits the connection to local peers. Each object may have the following properties:  credential Optional: The credential to use when logging into the server. This is only used if the object represents a TURN server. credentialType Optional: If the object represents a TURN server, this attribute specifies what kind of credential is to be used when connecting. The default is &quot;password&quot;. urls: This required property is an array of strings, each specifying a URL which can be used to connect to the server. Should be in the format &quot;stun:stun.example.org&quot; or &quot;turn:turn.example.org&quot;, with an optional transport parameter (&quot;turns&quot; or &quot;stuns&quot;, respectively) and an optional port number. If no transport parameter is specified, the server is assumed to be a STUN server. If no port is specified, the default port for the specified transport protocol is used. If multiple URLs are given, they are tried in the order listed until one succeeds. username Optional: If the object represents a TURN server, then this is the username to use during the authentication.  See the ICE Servers section of the connection guide for more details and examples on running your own ICE servers.  ","version":"Next","tagName":"h2"},{"title":"OpenID Connect​","type":1,"pageTitle":"Server","url":"/docs/configuration/server/#openid-connect","content":" The OpenID Connect configuration is used to authenticate the client using an external provider. The client will be redirected to the provider's login page and then redirected back to the client with an authorization code. The client will then exchange the authorization code for an id token and use that to authenticate with the server. The server will then validate the id token against the issuer to validate the connection.  The OpenID Connect client configured must support the authorization_code grant type and the openid scope, as well as support the code response type. It must also be configured with a token endpoint authentication method of &quot;none&quot; to enable the authorization code exchange without a client secret. The client must also be configured with the redirect URI https://&lt;server&gt;/oidc-callback. The &lt;server&gt; is determined from where the client is served from. For example, If the client is served from https://pod-arcade.example.com, then the redirect URI would be https://pod-arcade.example.com/oidc-callback. ","version":"Next","tagName":"h2"},{"title":"Docker","type":0,"sectionRef":"#","url":"/docs/getting-started/docker/","content":"","keywords":"","version":"Next"},{"title":"Docker Compose​","type":1,"pageTitle":"Docker","url":"/docs/getting-started/docker/#docker-compose","content":" There's docker-compose for running desktops in pod-arcade/example-apps  You'll need to set some of the environment variables to have it connect to the Pod Arcade server. Just be careful which example applications you look at. Many of those pod-arcade/example-apps simply use the built in VNC server to stream the desktop to the browser, not Pod Arcade. That's because it's much faster to do development that way, and will be compatible with pod-arcade if the VNC approach works. ","version":"Next","tagName":"h3"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/intro/","content":"Introduction Pod Arcade is an open-source project that enables you to stream games via RetroArch or other compatible software, running on Wayland, directly to your web browser. It is designed to be deployed on Kubernetes, but can also be deployed using Docker or any other container platform. There are two major components to Pod Arcade: Server — an MQTT server that manages the game streaming sessions. Desktops and web browsers connect to this server in order to stream games.Desktop — a server that runs on Wayland which streams games to the web browser and emulates input devices. All Pod Arcade communication between the Desktop component and the web browsers is done using WebRTC. WebRTC uses an algorithm called ICE to attempt to establish a direct connection between the Desktop and the Browser. In most cases, this will work without any additional configuration. However, if you are behind a firewall or NAT, you may need to configure your router to forward ports to your Pod Arcade server or add a TURN server to your Pod Arcade server configuration.","keywords":"","version":"Next"}],"options":{"id":"default"}}